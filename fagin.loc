@path
# pure data pipeline
null:main . classes . *Labels *Tree

# stub for feature table construction
Labels :: echo:labels
# stub for loading species tree
Tree :: echo:tree


@export
null:main as run


@2
null:main :+ mkdir . `input`
# Make all derived data, prepare environment
null:main :+ null:prep . map  .
    & ( null
        .
        ( write:gen . $1 wc:gen . get_genome )
        ( write:gff . $1 wc:gff . get_gff )
        .
        $1
    )
    list_species

@3
# Clean up all temporary files, archive data
null:main :+ null . mkdir . `archive`


@cache
null:main :: datcache


@check
null:main :+ file_readable . "data/species.txt"


@arg
# stub
echo:labels :: "labels"
# stub
echo:tree :: "tree"

write:gen :: "input/gen" ".txt"
write:gff :: "input/gff" ".txt"

# required parameters
list_species :: "/db/fagin-input/brassicaceae.tree"
get_genome :: "/db/fagin-input/fna"
get_gff :: "/db/fagin-input/gff"
get_synmap :: "/db/fagin-input/syn"


@lang
* :: sh


@alias
# stub
classes :: cat


@source sh

write(){
    prefix=$1
    suffix=$2
    species=$3
    data=$4

    cat ${data} > ${prefix}_${species}_${suffix}
}

file_readable(){
    test -f $1
}

list_species(){
    perl -pe 's/\W*(\w+)\W*/$1\n/g' $1
}

get_genome(){
    cat $1/$2.fna
}

get_gff(){
    cat $1/$2.gff
}

get_synmap(){
    cat $1/$2.syn
}

log(){
    cat $1 >> log
}


@include
"core/sh/control.loc"
"core/sh/atomic.loc"
"core/sh/datcache.loc"


@type
loadGenome :: Species -> Bioseq
loadGFF :: Species -> Table
file_readable :: Filename -> Bool
# currently I cannot express function types, so I use * in place of
# (Species->NULL)
map :: * -> Species -> NULL
