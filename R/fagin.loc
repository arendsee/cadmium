# By default the variables in path are assumed to be function names

@comment

(genid ~ target, features) --> (genid ~ features, labels) --> (genid, class)
                                /
                         tree--'

  {- partition qids ~ qspecies ~ tspecies -}

@export

main as run

@ontology

Seqid :: String
Sciname :: String
Filename :: String
Sequence :: Header Protein | Header Nucleotide
Header :: Seqid | Seqid String # Am I overfitting the problem?
Bool :: True | False
SearchInterval :: Interval Interval Flag
Flag :: Int Int Int
Interval :: GFF | GI
Seqinfo :: Sciname [(Seqid, Int)]

@type

# Lists in declarations not currently supported
O1,O2,O3,N1,N2,N3,U1,U2,U3,U4,U5,U6,U7 :: Seqid -> Sciname -> Sciname -> (Seqid, Sciname, Sciname)

gen,trn,orf,nuc,cds,rna,tec,una,ind,nst,res,scr :: [Seqid] -> Sciname -> [Sciname]

is_gen :: [Seqid] -> [Bool]
is_trn :: [Seqid] -> [Bool]
is_orf :: [Seqid] -> [Bool]
is_nuc :: [Seqid] -> [Bool]
is_cds :: [Seqid] -> [Bool]
is_rna :: [Seqid] -> [Bool]
is_tec :: [Seqid] -> [Bool]
is_una :: [Seqid] -> [Bool]
is_ind :: [Seqid] -> [Bool]
is_nst :: [Seqid] -> [Bool]
is_res :: [Seqid] -> [Bool]
is_scr :: [Seqid] -> [Bool]

merge_leafs :: auto

qids :: Filename -> [Seqids]
qspecies :: Filename -> Sciname
tspecies :: Filename -> [Sciname]

filter_aln :: [Alignment] -> [Alignment]

too_big :: [Sequence] -> [SearchInterval] -> [Seqid]

resized_ids :: [(Seqid, String)] -> [Seqid]
indeled_ids :: [(Seqid, String)] -> [Seqid]

scrambled_ids :: [SearchInterval] -> [Seqid]

load_fasta :: Filename -> [Sequence]
load_tree  :: Filename -> Tree
load_gff   :: Filename -> GFF

is_aa :: [Sequence] -> Bool

gff :: Sciname -> GFF
bioseq :: Sciname -> [Sequence]

reduce_header :: [Sequence] -> [Sequence]

synder :: Sciname -> Sciname -> [SearchInterval]

tspecies :: Tree -> [Sciname]

translate :: [Nucleotide] -> [Protein]
unstar :: [Protein] -> [Protein]

si_size_class :: [SearchInterval] -> [(Seqid, String)]

ind :: [(Seqid, String)] -> [Seqid]
res :: [(Seqid, String)] -> [Seqid]

length :: [Sequence] -> [(Seqid, Int)]
seqinfo :: [(Seqid, Int)] -> Sciname -> Seqinfo

# Get parent child relations
parse_9th :: GFF -> [(String, String)]

getfasta :: GI -> [Sequence] -> [Sequence]

concat_same :: [Sequence] -> [Sequence]

getexon :: GI -> GI
getcds :: GI -> GI

getorf :: [Sequence] -> [Sequence]

rm_x :: [Sequence] -> [Sequence]

aln_xy :: Sequence -> [Sequence] -> [Alignment]

seq_sample :: [Sequence] -> Int -> [Sequence]

fpdist :: [Alignment] -> [Distribution]

align_genome :: Sciname -> Sciname -> Synmap

@path

main :: classes . labels tree

-----------------------------------------

C :: merge_leafs . *D . qids qspecies tspecies

E ::
    as_feature_table .
        (scr . res . nst . ind . una . tec . not) (cds . rna) .
            nuc . ord . trn . gen .
    tablate . gen trn orf nuc cds rna tec una ind nst res scr

-----------------------------------------

# Not currently supported
labels ::
  merge_leafs .
  gen ? O1,
  trn ? O2,
  orf ? O3,
  nuc ?
    cds ? N1,
    rna ? N2, N3,
  tec ? U1,
  una ? U2,
  ind ? U3,
  nst ? U4,
  res ? U5,
  scr ? U6, U7 .
  qids qspecies tspecies

-----------------------------------------
gen :: is_gen . filter_aln . aa_aln . aa:1 aa:2
trn :: is_trn . filter_aln . aa_aln . aa   aa_morf
orf :: is_orf . filter_aln . aa_aln . aa   aa_ngorf
nuc :: is_nuc . filter_aln . dna_aln . gene genomic_si
cds :: is_cds . intersection . (getcds . gff:1) (getcds . gff:2)
rna :: is_rna . intersection . (getrna . gff:1) (getrna . gff:2)
tec :: is_tec . too_big . Sequence SearchInterval
una :: is_una . unassembled . SearchInterval
ind :: is_ind . indeled_ids . si_size_class
nst :: is_nst . gff nstrings
res :: is_res . resized_ids . si_size_class
scr :: is_scr . scrambled_ids . SearchInterval


-----------------------------------------
ind      :: indel.stats . findIndels . SearchInterval
gff      :: gi . (parse_9th . gff) (seqinfo . (length . bioseq))
seq_feat :: extract_feature . gff bioseq
bioseq   :: (is_aa ? unstar , id) . reduce_header . load_fasta

aa_morf  :: unstar . translate . getorf . concat . getfasta . (getexon gff) bioseq
aa_ngorf :: unstar . rm_x . translate . getorf . bioseq
aa       :: unstar . translate . concat . getfasta . (getcds gff) bioseq

gene :: concat . getfasta . (getcds gff) bioseq
genomic_si :: getfasta . SearchInterval bioseq

aln_aa2aa ::
    fit_gumbel .
        (aln_xy . bioseq:1 bioseq:2)
        (fpdist . aln_xy . (seq_sample bioseq:1) (seq_sample bioseq:2))

SearchInterval ::
    synder .
        (align_genome . bioseq:1 bioseq:2)
        (length:1 bioseq:1) (length:2 bioseq:2)

O1 = ['ORFic',     'O1', 'ORFic - known protein'            ]
O2 = ['ORFic',     'O2', 'ORFic - transcribed ORF'          ]
O3 = ['ORFic',     'O3', 'ORFic - unknown ORF'              ]
N1 = ['Non-ORFic', 'N1', 'SI overlaps CDS'                  ]
N2 = ['Non-ORFic', 'N2', 'SI overlaps exon'                 ]
N3 = ['Non-ORFic', 'N3', 'SI overlaps no known gene'        ]
U1 = ['Unknown',   'U1', 'skipped'                          ]
U2 = ['Unknown',   'U2', 'unassembled'                      ]
U3 = ['Unknown',   'U3', 'possible indel'                   ]
U4 = ['Unknown',   'U4', 'possibly in unknown region'       ]
U5 = ['Unknown',   'U5', 'possibly resized'                 ]
U6 = ['Unknown',   'U6', 'scrambled synteny'                ]
U7 = ['Unknown',   'U7', 'good syntenic match, no homology' ]
-----------------------------------------

@arg
synder :: k=100, b='011111'

nst/GFF :: species=$2

scr/SearchInterval :: <species=$3>

@alias
gi        = annotated_gi
gff       = get_raw_gff
seqinfo   = get_seqinfo
length    = get_sequence_length
fasta     = load_fasta_aa
tree      = load_tree
parse_9th = undefined

@doc
gen :: 'Is AA similar to a known gene?'
trn :: 'Is AA similar to any ORF on known mRNA?'
orf :: 'Is AA similar to any ORF anywhere?'
nuc :: 'Is DNA similar to anything?'
cds :: 'Does search interval overlap a CDS?'
rna :: 'Does search interval overlap an exon?'
tec :: 'Was the nucleotide not searched for technical reasons?'
una :: 'Query maps off target scaffold'
ind :: 'Query maps to zero-length target interval'
nst :: 'Query maps to N-string'
res :: 'Query maps to target interval smaller than self'
scr :: 'Query maps inbetween contiguous block'

parse_9th :: 'Parse the parent-child relations from the 9th GFF column'
