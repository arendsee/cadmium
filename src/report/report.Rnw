\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{fullpage}
\usepackage{wrapfig}
\usepackage{color}
\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=blue,
    filecolor=blue,
    linkcolor=blue,
    urlcolor=blue
}

\DeclareUnicodeCharacter{00A6}{|}
\DeclareUnicodeCharacter{00B0}{*}

% Prevent floats from crossing section or subsection boundaries
\usepackage[section]{placeins}
% Credit for this voodoo goes to Heiko Oberdiek
\makeatletter
\AtBeginDocument{%
  \expandafter\renewcommand\expandafter\subsection\expandafter{%
    \expandafter\@fb@secFB\subsection
  }%
}
\makeatother

\title{Report}

\begin{document}

\maketitle
\tableofcontents

\section{Introduction}

The Fagin pipeline receives input from the Synder, which uses a synteny
framework to map genes in one genome to search intervals in another.

<<install.dependencies, echo=FALSE, message=FALSE>>=
opts_chunk$set(echo=FALSE)
deps <- c(
    "ape",
    "data.tree",
    "devtools",
    "dplyr",
    "fitdistrplus",
    "ggplot2",
    "intervals",
    "magrittr",
    "reshape2",
    "robustreg",
    "scales",
    "tidyr",
    "gridExtra",
    "xtable",
    "yaml"
)
bio.deps <- c('Biostrings', 'GenomicRanges')
chooseCRANmirror(ind=1)
for (x in c(deps, bio.deps)) {
    if(!require(x, character.only=TRUE, quietly=TRUE)){
        if(x %in% bio.deps){
            require(devtools)
            source("https://bioconductor.org/biocLite.R")
            biocLite(x)
        } else {
            install.packages(x)
        }
    }
}
@
<<load_libraries>>=

require(ape)
require(Biostrings)
require(data.tree)
require(dplyr)
require(fitdistrplus)
require(GenomicRanges)
require(ggplot2)
require(gridExtra)
require(magrittr)
require(reshape2)
require(robustreg)
require(scales)
require(tidyr)
require(xtable)
require(yaml)

source('~/src/git/fagin/src/report/R/util.R')
source('~/src/git/fagin/src/report/R/classification.R')
source('~/src/git/fagin/src/report/R/loadData.R')
source('~/src/git/fagin/src/report/R/indels.R')
source('~/src/git/fagin/src/report/R/syntenic_stats.R')
source('~/src/git/fagin/src/report/R/sequence_alignments.R')
source('~/src/git/fagin/src/report/R/feature_overlaps.R')
source('~/src/git/fagin/src/report/R/plot.R')
source('~/src/git/fagin/src/report/R/versions.R')

use_cache <- TRUE
cache     <- cache_factory(config)
config    <- LoadConfig(configfile='~/src/git/fagin/fagin.cfg')
l_seqinfo <- LoadSeqinfoList(config)
query     <- cache(LoadQuery, config, l_seqinfo)

@

\section{Input Data}

\subsection{Species phylogeny}

<<view-tree>>=
tree <- read.tree(config$f_tree)
plot(tree)
@

\subsection{Genomic statistics}

\begin{figure}
    \center
<<plot-scaffold-lengths, message=FALSE, cache=TRUE>>=
scaflen <- read.table(config$f_scaflen, header=TRUE)
scaflen <- group_by(scaflen, species) %>%
    arrange(-length) %>%
    mutate(idx=1:length(scaffold)) %>%
    droplevels
ggplot(scaflen) +
    geom_point(aes(x=idx, y=length), size=0.2) +
    scale_y_continuous(
        trans='log10',
        breaks=trans_breaks('log10', function(x) round(10^x))
    ) +
    facet_wrap(~species, scale='free_x')
@
    \caption{\textbf{Scaffold lengths}. Sorted by length on x-axis.}
\end{figure}

\begin{figure}
    \center
<<plot-scaffold-lengths-2, cache=TRUE, fig.width=7, fig.height=6>>=
scaflen$chrid <- factor(scaflen$idx)
scaflen_chr <- subset(scaflen, length > 10^7) %>% droplevels
ggplot(scaflen_chr) +
    geom_path(aes(x=chrid, y=length, group=species)) +
    geom_point(aes(x=chrid, y=length, color=species), size=4) +
    xlab('Scaffold number (by size)') +
    ylab('Scaffold length (in DNA bases)') +
    theme(
        legend.position=c(1, 1),
        legend.justification=c(1, 1)
    )
@
    \caption{Lengths of scaffolds greater than 10 Mb. Sorted by size.}
\end{figure}

\begin{figure}[!ht]
    \centering
<<plot-nstring, cache=TRUE>>=
nstring <- read.table(config$f_nstrings, header=TRUE)
nstring$length <- with(nstring, stop - start + 1)
dplyr::rename(scaflen_chr, scaffold_length = length) %>%
  merge(nstring, by=c('species', 'scaffold')) %>%
  ggplot +
    geom_segment(
        aes(
            y=idx,
            yend=idx,
            x=start,
            xend=stop),
        size=5) +
    geom_segment(
        aes(
            y=idx,
            yend=idx,
            x=1,
            xend=scaffold_length),
        size=0.2) +
    geom_text(
        aes(
            y=idx + 0.2,
            x=scaffold_length,
            label=scaffold),
        hjust='left',
        family='sans',
        fontface='plain',
        size=2) +
    facet_wrap(~species, scale='free_y')
@
    \caption{\textbf{Strings of unknowns}. Most assemblies have certain regions
        who lengths may be known but no sequence is available, these regions
        may be replaced with strings of consecutive N's. The vertical bars in
        this plot correspond to these regions, with width proportional to the
        number of N's. Only scaffolds with lengths greater than 10 Mb are shown.}
\end{figure}

\begin{figure}[!ht]
  \centering
<<plot-gc, cache=TRUE>>=
read.table(config$f_kbcomp, header=TRUE) %>%
  subset(N == 0) %>%
  dplyr::mutate(GC = (C + G) / (A + C + G + T)) %>%
  ggplot +
    geom_boxplot(aes(x=species, y=GC), width=0.2) +
    geom_violin(aes(x=species, y=GC), alpha=0.3) +
    ylab('G+C Proportion')
@
    \caption{\textbf{GC content of 10000 random 1kb intervals}. Any interval with 1 or more N's was ignored.}
\end{figure}

\subsection{Proteomic statistics}

\section{Synteny}

\begin{figure}[!ht]
    \centering
<<synteny-diagnostic-scatter, cache=TRUE, message=FALSE>>=
lapply(
  results,
  function(x){
    syn <- x$syn
    lograt <- log2(width(syn$query) / width(syn$target)[syn$query$over])
    lograt <- lograt[abs(lograt) > 0.25] 
    data.frame(
      lograt=lograt,
      index=1:length(lograt)
    )
  }
) %>% melt(id.vars=c('lograt', 'index')) %>% dplyr::rename(species=L1) %>%
ggplot +
  geom_point(aes(x=index, y=lograt), size=0.2) +
  xlab('Ordered position on query genome') +
  ylab('log2 of query to target length ratio') +
  facet_wrap(~species, scale='free_x')

@
    \caption{\textbf{Diagnostic plot of query to target lengths in synteny
        map}. The syntenic intervals on the query and target sides should
        be of similar length.  They will not be exactly the same size if gaps
        are allowed in the alignment, but wild deviation from 0 (more than,
        say, 2) indicates errors in the input. To avoid overplotting, values
        between -0.25 and 0.25 are not plotted.} 
\end{figure}


<<main-chunk, message=FALSE, warning=FALSE>>=

# number of loci in query
nloci <- query$gff %>% mcols %>% subset(type == 'mRNA') %$% parent %>% unique %>% length

# number of orphans in query
norphan_loci <- model2locus[query$orphans, 'parent'] %>% unique %>% length

get_results <- function(){
  results <- list()
  for(s in config$species){
    if(s %in% c(config$focal_species)){
      next
    }
    results[[s]] <- getTargetResults(
      species   = s,
      query     = query,
      config    = config,
      l_seqinfo = l_seqinfo,
      use_cache = use_cache
    )
  }
  results
}

get_model2locus_map <- function(query){
  model2locus <- query$gff %>%
    subset(type == 'mRNA') %>%
    mcols
  rownames(model2locus) <- model2locus$seqid
  model2locus <- model2locus['parent']
  model2locus
}

results <- cache(get_results)

model2locus <- get_model2locus_map(query)
labels <- determineLabels(query, results, config)
origin <- determineOrigins(labels, config)

@

\subsection{Search interval overview}

Syntenic flags:

\begin{description}
  \item[0] the search interval is reliable
  \item[1] the start edge is unreliable
  \item[2] the stop edge is unreliable
  \item[3] both edges are unreliable, but there is an overlap
  \item[4] query is to the left of a contig, no overlap
  \item[5] query is to the right of a contig, no overlap
\end{description}

<<plot-flags>>=
lapply(results, function(x) x$flagsum) %>%
  melt %>%
  set_names(c("group", "orphan", "proportion", "species")) %>%
  ggplot(aes(species, proportion)) +
    geom_bar(aes(fill=orphan), stat='identity', position='dodge') +
    facet_wrap(~group)

@


<<>>=
melt_seqaln <- function(field){
  m <- results %>%
    lapply(function(x) x[[field]][which(names(x[[field]]) %in% c('map', 'sam'))]) %>%
    melt(level=2, id.vars=c('score', 'pval', 'query')) %>%
    dplyr::select(-variable, -value) %>%
    dplyr::rename(group=L3, species=L2) %>%
    dplyr::group_by(query) %>%
    dplyr::filter(score == max(score)) %>%
    dplyr::filter(score > 0)
}

plot_seqaln <- function(d, cutoff){
  ggplot(d) +
    geom_violin(
      mapping=aes(x=species, y=-1*log2(pval)),
      data=m,
      alpha=0.3
    ) +
    geom_point(
      mapping=aes(x=species, y=-1*log2(pval)),
      data=subset(m, pval < cutoff) %>%
           dplyr::group_by(query, species) %>%
           dplyr::filter(score == max(score)) %>%
           as.data.frame,
      position=position_jitter(width=0.3),
      color='red'
    ) +
    geom_hline(yintercept=-1*log2(cutoff), color='red') +
    xlab('Raw alignment score (BLOSUM80)') +
    ylab('-log2(p)') +
    coord_flip() +
    facet_wrap(~group)
}
@


\subsection{Mapping to known target genes}
<<>>=
  m <- melt_seqaln('prot2prot')
  prot2prot.cutoff <- config$prot2prot_pval / (m$query %>% unique %>% length)
  plot_seqaln(m, prot2prot.cutoff)
@


\subsection{Mapping to unknown ORFs on known mRNAs}
\begin{figure}[!ht]
  \centering
<<fig.width=6, fig.height=4, message=FALSE, cache=TRUE>>=
m <- lapply(results, function(x) x$features) %>%
    melt(id.vars=c('query', 'target'), level=2) %>%
    dplyr::rename(species=L2, type=L3) %>%
    dplyr::filter(type %in% c('CDS', 'mRNA', 'gene')) %>%
    dplyr::count(query, species, type) %>%
    dplyr::rename(n.feature=n) %>%
    dplyr::group_by(species, type, n.feature) %>%
    dplyr::tally()
m.zero <- m %>%
  group_by(species, type) %>%
  summarize(n=sum(n)) %>%
  mutate(
    n.feature = 0,
    n = length(query$aa) - n
  )
m2 <- rbind(m, m.zero)
ggplot(m2) +
  geom_point(aes(x=n.feature, y=n), size=0.2) +
  geom_line(aes(x=n.feature, y=n), alpha=0.05) +
  xlab('Number of overlapped features') +
  ylab('Number of search intervals') +
  scale_y_continuous(
    trans='log2',
    breaks=trans_breaks('log2', function(x) round(2^x))
  ) +
  facet_grid(type~species)
@
  \caption{Number of target features overlapping a search interval}
\end{figure}
<<results='asis', cache=TRUE>>=
merge(
  results %>%
    lapply(function(x) x$features$CDS$query) %>%
    lapply(unique) %>%
    lapply(length) %>%
    melt %>%
    dplyr::rename(CDS=value, species=L1),
  results %>%
    lapply(function(x) x$features$mRNA$query) %>%
    lapply(unique) %>%
    lapply(function(x) sum(x %in% query$orphans)) %>%
    melt %>%
    dplyr::rename(mRNA=value, species=L1)
) %>% xtable(caption='Number of orphans with search intervals overlapping given features')
@

\begin{figure}[!ht]
<<>>=
  m <- melt_seqaln('prot2transorf')
  prot2transorf.cutoff <- config$prot2transorf_pval / (m$query %>% unique %>% length)
  plot_seqaln(m, prot2transorf.cutoff)
@
  \caption{
    \textbf{Orphan genes hits against target ORFs}. All START/STOP bound open
    reading frames in the target genome were extracted. All orphan proteins
    were aligned against the ORFs that overlap one of their search intervals.
    Dots correspond to hits above \Sexpr{config$prot2allorf_minscore}.
  }
  \centering
\end{figure}


\subsection{Mapping to unknown ORFs outside known mRNAs}

\begin{figure}[!ht] \centering
<<>>=
  m <- melt_seqaln('prot2allorf')
  prot2allorf.cutoff <- config$prot2allorf_pval / (m$query %>% unique %>% length)
  plot_seqaln(m, prot2allorf.cutoff)
@
  \caption{
    \textbf{Orphan genes hits against target ORFs}. All START/STOP bound open
    reading frames in the target genome were extracted. All orphan proteins
    were aligned against the ORFs that overlap one of their search intervals.
    Dots correspond to hits above \Sexpr{prot2allorf.cutoff}.
  }
\end{figure}


\subsection{Mapping to any DNA region in the search interval}
\begin{figure}[!ht]
  \centering
<<message=FALSE, warning=FALSE, cache=TRUE>>=
<<>>=
  m <- melt_seqaln('dna2dna')
  dna2dna.cutoff <- config$dna2dna_pval / (m$query %>% unique %>% length)
  plot_seqaln(m, dna2dna.cutoff)
@
\caption{\
  Scores of orphan genes against their search intervals. In \textbf{ctrl}, the
  starting positions of the orphan genes were permuted while preserving their
  gene length. By chance, a few of these permuted indices may start on their
  original place, so there will be a few highscoring values. Dots correspond to
  orphans with scores above \Sexpr{dna2dna.cutoff}.
}
\end{figure}


\subsection{Find indel events}
<<results='asis', cache=TRUE>>=
results %>%
  lapply(function(x) x$ind.stats[1:2]) %>%
  melt %>%
  dplyr::rename(seqid=value, group=L2, species=L1) %>%
  dplyr::mutate(
    orphan = ifelse(seqid %in% query$orphans, 'orp', 'old'),
    group = sub('.queries', '', group)
  ) %>%
  dplyr::count(group, species, orphan) %>%
  dcast(species ~ group + orphan, mean, value.var='n') %>%
  dplyr::arrange(indeled_old, resized_old, indeled_orp, resized_orp) %>%
  dplyr::rename(
    ind_old=indeled_old, ind_orp=indeled_orp,
    res_old=resized_old, res_orp=resized_orp
  ) %>%
  xtable(
    display=c('s', 's', 'd', 'd', 'd', 'd'), 
    caption=
      'Summary of indel and resize events. A query is classified as indeled if at
      least one search interval is less than 5\\% of the length of the query. A
      query classified as resized if at least one search interval is between 5\\%
      and 100\\% the size of the query. Resize and indel events are only considered
      if the search interval is bounded (flag == 0), in which case the search
      interval length upper bounds the length of any contained homolog.'
  )
@


\subsection{Find queries overlapping N-strings}
<<results='asis', cache=TRUE>>=
results %>%
  lapply(function(x) unique(x$query2gap$query)) %>%
  melt %>%
  dplyr::mutate(
    orphan = ifelse(value %in% query$orphans, 'orphan', 'non-orphan')
  ) %>%
  dplyr::rename(species=L1) %>%
  dplyr::count(species, orphan) %>%
  dcast(species ~ orphan, mean, value.var='n') %>%
  xtable(
    display=c('s', 's', 'd', 'd'),
    caption=
    'The number of query genes for which at least one search interval overlaps
    at least one string of Ns (unknown bases) in the target genome. These genes
    could potentially be missed in sequence searches if the target homologs are
    inside these missing regions. NOTE: it cannot be assumed that the length of
    the N-string is equal to the length of the unknown region; the true unknown
    region length is often unknown, so a stretch of 100 Ns is often inserted to
    represent the gap of unknown length.'
  )
@

\subsection{Leaf labels}

<<results='asis', cache=TRUE>>=
labels$summary %>% xtable
@

\begin{figure}[!ht]
  \centering
<<>>=
labels$summary %>%
  dplyr::group_by(species) %>%
  mutate(proportion = count / sum(count)) %>%
  ggplot(aes(description, proportion)) +
  geom_bar(aes(fill=species), stat='identity', position='dodge') +
  coord_flip()
@
  \label{fig:}
\end{figure}

\begin{description}
  \item[CLASS 1: Genic]
    \begin{description}

      \item[known gene] Query has strong protein sequence similarity to a known
        target protein in the search interval.

      \item[unknown ORF off known mRNA] Query has strong protein sequence
        similarity to an unannotated open reading frame (ORF), bound by a STOP
        and START codon, that is in the search interval but that is NOT on a
        region known to be transcribed.

      \item[unknown ORF on known mRNA] Query has strong protein sequence
        similarity to an unannotated ORF on a spliced mRNA (but does not match
        a known genic ORF).

    \end{description}
  \item[CLASS 2: Non-genic]
    \begin{description}

      \item[CDS in SI] One of more known coding sequences (CDS) are in the
        search interval, but there is no predicted protein sequence similarity.

      \item[mRNA but not CDS in SI] One of more transcribed regions are in the
        search interval, but no CDS.

      \item[no gene in SI] No annotated coding genes are within the search interval.

      % \item[Intergenic] Query maps to no mRNAs and ALL search intervals are
      %   bounded. The query overlaps no \textit{annotated} target gene.
      %
      % \item[Possible-intergenic] Query maps to no mRNAs, but one or more search
      %   intervals is unbounded.

    \end{description}
  \item[CLASS 3: Unknown]
    \begin{description}

      \item[possible indel] Query maps to bounded search interval that is less
        than 5\% the query search interval length. AND the query maps to no other
        intervals.

      \item[possible N-string] The gene is of unknown origin and overlaps an
        unassembled regions (N-string).

      \item[possible resized] Query maps to bounded search interval that is
        5-100\% the query length. AND the query maps to no other intervals.
        These could correspond to indels, or expansions in the query search
        interval. I distinguish between resized and indeled because by the most
        common case where the search interval is smaller than the query is a
        full deletion, where the search interval length is 0. The 5\% cutoff is
        just to allow for inaccuracies in alignment. The true deletions have
        such a strong. My gerrymandering of the target intervals has obfuscated
        the query/target relation, I may need to rethink this.

      \item[syntenically scrambled] The query maps to target intervals that are
        unbounded and unanchored. Error in our search space estimates is a
        likely cause for not identifying the gene.

      \item[unknown] The synteny is reliable and there is no evidence of
        indels, but there is no sequence similarity of any sort to any of the
        search intervals. This could be caused be mutation completely past
        detectability, or by undetected deletions, or by transposition of the
        gene to a new context.

    \end{description}

\end{description}

\subsection{Final Classifications}

\begin{table}[!ht]
  \centering
  \begin{tabular}{| l | c c c |}
    \hline
    leaf states & gen & non & unk \\
    \hline
    gen gen & 1 & 0 & 0 \\
    gen non & 1 & 0 & 0 \\
    gen unk & 1 & 0 & 0 \\
    non non & 0 & 1 & 0 \\
    non unk & 0 & 0 & 1 \\
    unk unk & 0 & 0 & 1 \\
    \hline
  \end{tabular}

  \caption{Inference of parent based on child leaves. Assumes a bifurcating
    tree. \textbf{gen} is genic, \textbf{non} is non-genic, and \textbf{unk} is
    unknown. 1 and 0 are ancestor asignments, e.g. if the leafs are 'gen' and
    'gen', the ancestor is classified as 'gen' (as in column 1 row 1).}

  \label{tab:label}
\end{table}

<<>>=
print(origin$root, 'gen', 'non', 'unk')
@

<<triple-labels, results='asis'>>=
# TODO: Generalize to n-strata
tri = origin$backbone %>%
  dplyr::count(ps1, ps2, ps3)
xtable(tri, caption='Counts of primaries labels in youngest to oldest strata')
@

<<>>=

# cryptic gene families
g1 = subset(tri, ps3 == "ORFic" & (ps2 == "ORFic" | ps1 == "ORFic"))

# candidate clade-specific orphan genes
g2 = subset(tri, ps1 == "ORFic" & ps3 != "ORFic")

# candidate de novo
g3 = subset(tri,  (ps1 != "ORFic" & ps2 != "ORFic" & ps3 != "ORFic") &
            !(ps1 == "Unknown" & ps2 == "Unknown" & ps3 == "Unknown")
)

# unknown or weird
g4 = subset(tri, (ps1 != "ORFic" & (xor(ps2 == "ORFic", ps3 == "ORFic"))) |
            (ps1 == "Unknown" & ps2 == "Unknown" & ps3 == "Unknown")
)

stopifnot(sum(nrow(g1) + nrow(g2) + nrow(g3) + nrow(g4)) == nrow(tri))

sum(g1$n)

sum(g2$n)

sum(g3$n)

sum(g4$n)

@


% <<>>=
% a <- labels$labels %>% melt %>% dplyr::rename(species=L1, query=seqid)
% b <- results %>%
%   lapply(
%     function(x) {
%       data.frame(
%         bits=x$synteny$bits,
%         query=names(x$synteny$bits)
%       )
%     }
%   ) %>% melt %>%
%   dplyr::rename(species=L1)
% d <- merge(a, b, by=c('query', 'species')) %>%
%  merge(labels$summary[c('description', 'secondary')]) %>%
%  unique
% @
%
% <<bit-summaries>>=
% m <- split(d, d$bits) %>% lapply(function(x) x$description %>% factor %>% summary)
% @


% <<GGG-analysis>>=
% GGG <- origin$backbone %>%
%   subset(ps1 == 'ORFic' & ps2 == 'ORFic' & ps3=='ORFic') %>%
%   rownames
% 
% GGG.labels <- labels$labels %>%
%   melt(id.vars=c('seqid', 'secondary'))  %>%
%   dplyr::rename(species=L1)
% 
% GGG.gene.by.gene <- subset(d, query %in% GGG) %>%
%   dplyr::select(query, species, description) %>% 
%   {split(., f=factor(.$query))}
% 
%   orphans <- query$orphans
%   p2p_cutoff <- config$prot2prot_pval     / length(orphans)
%   p2a_cutoff <- config$prot2allorf_pval   / length(orphans)
%   d2d_cutoff <- config$dna2dna_pval       / length(orphans)
%   p2t_cutoff <- config$prot2transorf_pval / length(orphans)
% 
% # known aa seqs
% kaa <- list()
% # all ORF seqs
% oaa <- list()
% # all spliced ORF seqs
% taa <- list()
% for(s in config$species){
%   if(s == config$focal_species){
%     next
%   }
%   print(s)
%   kfile <- sprintf('%s/%s.faa', config$d_faa,       s)
%   kids <- results[[s]]$prot2prot$map     %>% subset(pval < 0.01) %$% target %>% unique
%   print(length(kids))
%   kaa[[s]] <- LoadFASTA(kfile, isAA=TRUE)[kids]
%   ofile <- sprintf('%s/%s.faa', config$d_orffaa,    s)
%   oids <- results[[s]]$prot2allorf$map   %>% subset(pval < 0.01) %$% target %>% unique
%   print(length(oids))
%   oaa[[s]] <- LoadFASTA(ofile, isAA=TRUE)[oids]
%   tfile <- sprintf('%s/%s.faa', config$d_trans_orf, s)
%   tids <- results[[s]]$prot2transorf$map %>% subset(pval < 0.01) %$% target %>% unique
%   print(length(tids))
%   taa[[s]] <- LoadFASTA(tfile, isAA=TRUE)[tids]
% }
% 
% gg <- results %>%
%   lapply(function(x) x$prot2allorf$map %>% subset(pval < p2a_cutoff)) %>% 
%   melt %>%
%   dplyr::rename(species=L1) %>%
%   dplyr::select(query, target, species)
% 
%   count(class) %>%
%   xtable(caption='Counts of primaries labels in youngest to oldest strata')
% @

\newpage
\section{Appendix}

\subsection{Synteny cases: the good, the bad, and the ugly}

In this subsection I will cover the cases Synder and Fagin handles goodly,
badly, and ugly. As my methods improve, cases should migrate from ugly to bad
to good.

\begin{description}

  \item[The Good] Handled exactly as I they ought to be.

  \item[The Bad] Wrong in obvious, clear-cut ways; these are nice in that they
      can probably be resolved with obvious (though possibly hard to implement)
      changes in the Synder algorithm.

  \item[The Ugly] May be 1) messy but not seriously off, 2) seriously off in
      difficult to fix ways, or 3) seriously off in ways I don't even
      understand. 

\end{description}

<<cache=TRUE>>=
load('~/src/git/fagin/cache/Arabidopsis_thaliana.vs.Arabidopsis_lyrata-LoadTarget.Rdat')
target <- out
@

\subsubsection{The Good}
\FloatBarrier

\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT1G01471.1', target, k=1000)
@
\caption{\textbf{Case 1: Query within a homologous region.} We nail the simplest case}
  \label{fig:good-case-1}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT2G31981.1', target, k=1000)
@
\caption{\textbf{Case 2a: Dulication.} Duplications and overlaps with
    extensions, no problems.}
  \label{fig:good-case-2a}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT2G38350.1', target, k=3000)
@
  \caption{\textbf{Case 2b: Dulications.} Weird duplication event is handled nicely.}
  \label{fig:good-case-2b}
\end{figure}
\FloatBarrier


\subsubsection{The Bad}
\FloatBarrier

\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT1G35320.1', target, k=10000)
@
\caption{\textbf{Case 1: strand mishandling}. (\textbf{top}) lack of strand awareness results in
    the search interval being placed on the wrong side of a block.}
  \label{fig:bad-case-1}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT2G47844.1', target, k=1000)
@
\caption{\textbf{Case 2: excessive extension.} Clean flag==2 case extends
    further than needed. It would be better to snap to the end of the nearest
    adjacent block.}
  \label{fig:bad-case-2}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT3G13403.1', target, k=1000)
@
\caption{\textbf{Case 3: double excess extension.} Clean flag==3 case extends
    further than needed. Again, snapping would be cleaner.}
  \label{fig:bad-case-3}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT3G04854.1', target, k=3000)
@
\caption{\textbf{Case 4: falsly imputed inversion.} incorrectly asserts an
    inversion occurred and places search interval on the wrong side
    (\textbf{search interval on right}).}
  \label{fig:bad-case-4}
\end{figure}


\subsubsection{The Ugly}
\FloatBarrier

\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT1G01073.1', target, k=1000)
@
\caption{\textbf{Case 2a: overlapping homologous regions.} Slightly overlapping
    regions split badly}
  \label{fig:ugly-case-1a}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT2G34800.1', target, k=3000)
@
\caption{\textbf{Case 2b: overlapping homologous regions.} Slightly
    overlapping(?) regions split badly}
  \label{fig:ugly-case-1b}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G08762.1', target, k=1000)
@
\caption{\textbf{Case 2a: adjacently overlapping.} Homologous intervals that
    overlap in both target and query.  Perhaps these should be merged, but
    there is something weird going on at the sequence level that causes this.
    Maybe they should be merged with a flag.}
  \label{fig:ugly-case-2a}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G18957.1', target, k=3000)
@
\caption{\textbf{Case 2b: adjacently overlapping.} Again homologous intervals
    overlapping on both sides disrupt an otherwise clean flag==0 case.}
  \label{fig:case-2b}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G25719.1', target, k=5000)
@
\caption{\textbf{Case 3a: insertions}. A single large insertion screws up the
    otherwise contiguous blocks. The search interval should extend past the
    insertion, clipping to the nearest block. Likewise on the target side, it
    should clip somewhere.}
  \label{fig:ugly-case-3a}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G42148.1', target, k=20000)
@
\caption{\textbf{Case 3a: insertions}. Double insertions and missing from main
    context (A Hardboiled Wonderland).}
  \label{fig:ugly-case-3b}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT5G56795.1', target, k=2000)
@
  \caption{\textbf{Case 3c: insertions} Multiple non-adjacent insertions.}
  \label{fig:ugly-case-3c}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G32120.1', target, k=10000)
@
\caption{\textbf{Case 4a: extreme distance.} There are a bunch of genes in this
    class. I think they are centromere genes.}
  \label{fig:ugly-case-4a}
\end{figure}
%
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT4G16915.1', target, k=100000)
@
  \caption{\textbf{Case 4b: extreme distance.} THIS IS SPARTA}
  \label{fig:ugly-case-4b}
\end{figure}
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
  plotOne(q='AT4G31960.1', target, k=3000)
@
\caption{\textbf{Case 5a: Borken Oddly} This looks like it should be a clean flag==0.
    Why the double search interval?}
  \label{fig:ugly-case-5a}
\end{figure}
\FloatBarrier
\begin{figure}[!ht]
  \centering
<<cache=TRUE>>=
plotOne(q='AT3G25719.1', target, k=5000)
@
  \caption{\textbf{Case 5b: Borken Oddly.} I have no idea why there is a second SI}
  \label{fig:ugly-case-5b}
\end{figure}


\FloatBarrier

% <<>>=
% # Non-inversed transposition
% 
% 
% # # q <- labels$labels$Arabidopsis_lyrata %>% subset(secondary == "O1") %$% seqid
%     plotOne(q[1], target, k=10000)
%     plotOne(q[2], target, k=10000)
%     plotOne(q[3], target, k=10000)
%     plotOne(q[4], target, k=10000)
%     plotOne(q[5], target, k=10000)
%     plotOne(q[6], target, k=10000)
%     plotOne(q[7], target, k=10000)
% # # q <- labels$labels$Arabidopsis_lyrata %>% subset(secondary == "O2") %$% seqid
%     plotOne(q[1], target, k=10000)
%     plotOne(q[2], target, k=10000)
%     plotOne(q[3], target, k=10000)
%     plotOne(q[4], target, k=10000)
%     plotOne(q[5], target, k=10000)
%     plotOne(q[6], target, k=10000)
%     plotOne(q[7], target, k=10000)
% @


\subsection{Gumbel fitting diagnostics}

<<>>=
plot_fits <- function(group){
  for (species in names(results)){
    fit <- results[[species]][[group]]$dis$fit
    plot(fit, breaks=70)
    cat(sprintf('%s\n', species))
  }
}
@

\subsubsection{Query protein to target protein}

<<>>=
plot_fits('prot2prot')
@

\newpage
\subsubsection{Query protein to spliced ORF}

<<>>=
plot_fits('prot2transorf')
@

\newpage
\subsubsection{Query protein to any ORF}

<<>>=
plot_fits('prot2allorf')
@

\newpage
\subsubsection{Query DNA to search interval DNA}

<<>>=
plot_fits('dna2dna')
@

\subsection{Versions}

\begin{itemize}
    \item Fagin \Sexpr{get_fagin_version(config)}
    \item Synder \Sexpr{get_synder_version()}
\end{itemize}

\end{document}
