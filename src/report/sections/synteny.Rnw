\subsection{Data input}
% ============================================================================
% Import libraries
<<echo=FALSE, message=FALSE>>=
require(ggplot2)
require(intervals)
require(plyr)
require(magrittr)
require(xtable)
source('~/src/git/cadmium/src/report/R/findMissingGenes.R')
source('~/src/git/cadmium/src/report/R/testSyntenicGaps.R')
source('~/src/git/cadmium/src/report/R/build_gene2int.R')
source('~/src/git/cadmium/src/report/R/loadData.R')
opts_chunk$set(echo=FALSE)

# TODO REMOVE THIS IN PRODUCTION CODE
args <- list(
    query_gff = '~/src/git/cadmium/input/gff/Arabidopsis_thaliana.gff',
    synteny   = '~/src/git/cadmium/input/syn/Arabidopsis_thaliana.vs.Arabidopsis_lyrata.syn',
    nstring   = '~/src/git/cadmium/input/stat/nstrings.tab'
)
@
 
\subsection{Summaries of input data}
% ============================================================================
% Load all input data
<<cache=TRUE>>=
syn <- LoadSyntenyMap(args$synteny)
gff <- LoadGFF(args$query_gff, features='mRNA')
nstring <- LoadNString(args$nstring)
@


\subsection{Gene feature format file for focal species}
<<results='asis'>>=
head(gff) %>% xtable
plyr::ddply(gff, 'chr', summarize, mRNAs=length(chr)) %>% xtable
@


\subsection{N-string file}
<<results='asis'>>=
head(nstring) %>% xtable
@

\subsection{Syntenic ouput of SatsumaSynteny}
<<results='asis'>>=
head(syn) %>% xtable
plyr::ddply(syn, 'qchr', summarize, N.synteny.blocks=length(qchr)) %>% xtable
@

% ============================================================================
\begin{figure}[!hbpt]
<<fig.width=8, fig.height=8, cache=TRUE>>=
TestSyntenyGaps(syn, nstring)
@
\caption{In black: missing regions on the target between syntenic blocks. In
    red: strings of N's, bases that have not been correctly sequenced}
\end{figure}

% % ============================================================================
% % Build main syntenic data.frame
% <<make-gint, cache=TRUE, message=FALSE>>=
% # TODO continue from here
% if(file.exists('gene2int_map.tab')){
%     gint <- read.delim('gene2int_map.tab')
% } else {
%     gint <- Build_Gene2Int(syn=syn, gff=gff)
% }
% @

% % ============================================================================
% <<>>=
% write.table(
%     gint,
%     file='gene2int_map.tab',
%     sep="\t",
%     quote=FALSE,
%     col.names=TRUE,
%     row.names=FALSE
% )
% @
